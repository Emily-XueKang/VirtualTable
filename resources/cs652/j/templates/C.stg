CFile(f, classes, main) ::= <<
#include \<stdio.h>
#include \<stdlib.h>

typedef struct {
    char *name;
    int size;
    void (*(*_vtable)[])();
} metadata;

typedef struct {
    metadata *clazz;
} object;

object *alloc(metadata *clazz) {
    object *p = calloc(1, clazz->size); // wipe to 0s
    p->clazz = clazz;
    return p;
}

<classes; separator ="\n\n">

<main>
>>

ClassDef(class, fields, methods, vtable) ::= <<
// D e f i n e  C l a s s  <class.Name>
typedef struct {
    metadata *clazz;
    <fields:{f | <f>;}; separator = "\n">
} <class.Name>;

<if(methods)><class.vtable:{v | #define <class.Name>_<v.MethodName>_SLOT <v.slotNumber>}; separator = "\n"><endif>

<if(methods)><methods:{m | <m>}; separator = "\n"><endif>

void (*<class.Name>_vtable[])() = {
    <vtable:{v | (void (*)())&<v>}; separator = ",\n">
};

metadata <class.Name>_metadata = {"<class.Name>", sizeof(<class.Name>), &<class.Name>_vtable};
>>

MethodDef(m,funcName,returnType,args,body) ::= <<
<returnType> <funcName>(<if(args)><class.Name> *this, <args; separator=","><else><class.Name> *this<endif>)
{
    <body>
}
>>

MainMethod(main,funcName,returnType,args,body) ::= <<
<returnType> main(<args; separator=", ">)
{
    <body>
    return 0;
}
>>

Block(block, locals, instrs) ::= <<
<locals:{lo | <lo>;}; separator = "\n">
<instrs:{in | <in>;};separator = "\n">
>>

VarDef(var, type)   ::= "<type> <var.id>"

FuncName(f)         ::= "<f.ClassName>_<f.MethodName>"

ObjectTypeSpec(o)   ::= "<o.name> *"
PrimitiveTypeSpec(p)::= "<p.name>"

AssignStat(a,left,right) ::= "<left> = <right>"
PrintStringStat(p)  ::= "printf(<p.thestring>)"
PrintStat(p,args)   ::= "printf(<p.format>, <args; separator=\",\">)"
CallStat(c,call)    ::= "<call>"
CtorCall(ctor)      ::= "((<ctor.id> *)alloc(&<ctor.id>_metadata))"
ReturnStat(r,expr)  ::= "return <expr>"
WhileStat(w,condition, stat) ::= "while <w.cond> {<stat>}"
IfStat(i,condition, stat) ::= "if <i.cond> <stat>"
IfElseStat(i,condition, stat, elseStat) ::= <<
if <i.cond> <stat>;
else <elseStat>
>>

NullRef(n)          ::= "NULL"

LiteralRef(lit)     ::= "<lit.literal>"
VarRef(v)           ::= "<v.type><v.name>"
FieldRef(f, object) ::= "<object>-><f.name>"
ThisRef(t)          ::= "this"
MethodCall(m, receiver, receiverType, fptrType, args) ::= <<
(*<fptrType>(*(<m.receiver.name>)->clazz->_vtable)[<m.receiverType.name>_<m.name>_SLOT])(<args; separator=",">)
>>

FuncPtrType(f, returnType, argTypes) ::= "(<returnType> (*)(<argTypes; separator=\",\">))"
TypeCast(cast, type, expr) ::= "<if(type)>((<type>)<expr>)<else><expr><endif>"
